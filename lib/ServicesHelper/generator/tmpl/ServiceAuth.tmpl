// this file is autogenerated
var <%= name %>BaseService = require("./<%= name %>BaseService"),
    PermissionActions = require(utils.getLibPath() + "/permissions").PermissionActions;

var modelName = <%= name %>BaseService.definition.name;


function <%= name %>ServiceAuth() {
}

<%= name %>ServiceAuth.create = function createAuth(data, pv, next) {
    pv.hasPermissionWithoutModelId(PermissionActions.ADD, function (err, perm) {
        (perm && perm.isAuthorized === true) ? <%= name %>BaseService.create(query, next) : next(err);
    });
};

<%= name %>ServiceAuth.update = function updateAuth(data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? <%= name %>BaseService.update(data, next) : next(err);
    });
};

<%= name %>ServiceAuth.remove = function removeAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? <%= name %>BaseService.remove(pkValue, next) : next(err);
    });
};

<%= name %>ServiceAuth.findById = function findByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.VIEW, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? <%= name %>BaseService.findById(pkValue, next) : next(err);
    });
};

<%= name %>ServiceAuth.deleteById = function deleteByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? <%= name %>BaseService.deleteById(pkValue, next) : next(err);
    });
};

<%= name %>ServiceAuth.updateById = function updateByIdAuth(pkValue, data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? <%= name %>BaseService.updateById(pkValue, data, next) : next(err);
    });
};

<%= name %>ServiceAuth.find = function findAuth(query, roles, next) {
    <%= name %>BaseService.getDataSource().queryHook.authorizedFind(roles, modelName, query, next);
};
<%= name %>ServiceAuth.count = function countAuth(where, roles, next) {
    <%= name %>BaseService.getDataSource().queryHook.authorizedCount(roles, modelName, where, next);
};

<%= name %>ServiceAuth.findOne = function findOneAuth(query, roles, next) {
    this.find(query, roles, function (err, models) {
        next(err, (!err && models && models.length > 0) && models[0]);
    });
};



//finders implementation
<%=authFinders%>

module.exports = <%= name %>ServiceAuth;