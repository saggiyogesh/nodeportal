// this file is autogenerated
var RoleBaseService = require("./RoleBaseService"),
    PermissionActions = require(utils.getLibPath() + "/permissions").PermissionActions;

var modelName = RoleBaseService.definition.name;


function RoleServiceAuth() {
}

RoleServiceAuth.create = function createAuth(data, pv, next) {
    pv.hasPermissionWithoutModelId(PermissionActions.ADD, function (err, perm) {
        (perm && perm.isAuthorized === true) ? RoleBaseService.create(query, next) : next(err);
    });
};

RoleServiceAuth.update = function updateAuth(data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? RoleBaseService.update(data, next) : next(err);
    });
};

RoleServiceAuth.remove = function removeAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? RoleBaseService.remove(pkValue, next) : next(err);
    });
};

RoleServiceAuth.findById = function findByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.VIEW, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? RoleBaseService.findById(pkValue, next) : next(err);
    });
};

RoleServiceAuth.deleteById = function deleteByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? RoleBaseService.deleteById(pkValue, next) : next(err);
    });
};

RoleServiceAuth.updateById = function updateByIdAuth(pkValue, data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? RoleBaseService.updateById(pkValue, data, next) : next(err);
    });
};

RoleServiceAuth.find = function findAuth(query, roles, next) {
    RoleBaseService.getDataSource().queryHook.authorizedFind(roles, modelName, query, next);
};
RoleServiceAuth.count = function countAuth(where, roles, next) {
    RoleBaseService.getDataSource().queryHook.authorizedCount(roles, modelName, where, next);
};

RoleServiceAuth.findOne = function findOneAuth(query, roles, next) {
    this.find(query, roles, function (err, models) {
        next(err, (!err && models && models.length > 0) && models[0]);
    });
};



//finders implementation
RoleServiceAuth.getByName = function getByNameAuth(name, roles, next) {
    this.findOne({"where":{"name":name}}, roles, next); //autogenerated from js configs
};


RoleServiceAuth.getByIdAndVersion = function getByIdAndVersionAuth(id,version, roles, next) {
    this.find({"where":{"id":id,"version":version}}, roles, next); //autogenerated from js configs
};




module.exports = RoleServiceAuth;