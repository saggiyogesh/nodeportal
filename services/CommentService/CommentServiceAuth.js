// this file is autogenerated
var CommentBaseService = require("./CommentBaseService"),
    PermissionActions = require(utils.getLibPath() + "/permissions").PermissionActions;

var modelName = CommentBaseService.definition.name;


function CommentServiceAuth() {
}

CommentServiceAuth.create = function createAuth(data, pv, next) {
    pv.hasPermissionWithoutModelId(PermissionActions.ADD, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CommentBaseService.create(query, next) : next(err);
    });
};

CommentServiceAuth.update = function updateAuth(data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CommentBaseService.update(data, next) : next(err);
    });
};

CommentServiceAuth.remove = function removeAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CommentBaseService.remove(pkValue, next) : next(err);
    });
};

CommentServiceAuth.findById = function findByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.VIEW, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CommentBaseService.findById(pkValue, next) : next(err);
    });
};

CommentServiceAuth.deleteById = function deleteByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CommentBaseService.deleteById(pkValue, next) : next(err);
    });
};

CommentServiceAuth.updateById = function updateByIdAuth(pkValue, data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CommentBaseService.updateById(pkValue, data, next) : next(err);
    });
};

CommentServiceAuth.find = function findAuth(query, roles, next) {
    CommentBaseService.getDataSource().queryHook.authorizedFind(roles, modelName, query, next);
};
CommentServiceAuth.count = function countAuth(where, roles, next) {
    CommentBaseService.getDataSource().queryHook.authorizedCount(roles, modelName, where, next);
};

CommentServiceAuth.findOne = function findOneAuth(query, roles, next) {
    this.find(query, roles, function (err, models) {
        next(err, (!err && models && models.length > 0) && models[0]);
    });
};



//finders implementation
CommentServiceAuth.getById = function getByIdAuth(id, roles, next) {
    this.find({"where":{"id":id}}, roles, next); //autogenerated from js configs
};


CommentServiceAuth.getByIdAndVersion = function getByIdAndVersionAuth(id,version, roles, next) {
    this.find({"where":{"id":id,"version":version}}, roles, next); //autogenerated from js configs
};




module.exports = CommentServiceAuth;