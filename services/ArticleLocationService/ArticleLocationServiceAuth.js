// this file is autogenerated
var ArticleLocationBaseService = require("./ArticleLocationBaseService"),
    PermissionActions = require(utils.getLibPath() + "/permissions").PermissionActions;

var modelName = ArticleLocationBaseService.definition.name;


function ArticleLocationServiceAuth() {
}

ArticleLocationServiceAuth.create = function createAuth(data, pv, next) {
    pv.hasPermissionWithoutModelId(PermissionActions.ADD, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ArticleLocationBaseService.create(query, next) : next(err);
    });
};

ArticleLocationServiceAuth.update = function updateAuth(data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ArticleLocationBaseService.update(data, next) : next(err);
    });
};

ArticleLocationServiceAuth.remove = function removeAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ArticleLocationBaseService.remove(pkValue, next) : next(err);
    });
};

ArticleLocationServiceAuth.findById = function findByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.VIEW, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ArticleLocationBaseService.findById(pkValue, next) : next(err);
    });
};

ArticleLocationServiceAuth.deleteById = function deleteByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ArticleLocationBaseService.deleteById(pkValue, next) : next(err);
    });
};

ArticleLocationServiceAuth.updateById = function updateByIdAuth(pkValue, data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ArticleLocationBaseService.updateById(pkValue, data, next) : next(err);
    });
};

ArticleLocationServiceAuth.find = function findAuth(query, roles, next) {
    ArticleLocationBaseService.getDataSource().queryHook.authorizedFind(roles, modelName, query, next);
};
ArticleLocationServiceAuth.count = function countAuth(where, roles, next) {
    ArticleLocationBaseService.getDataSource().queryHook.authorizedCount(roles, modelName, where, next);
};

ArticleLocationServiceAuth.findOne = function findOneAuth(query, roles, next) {
    this.find(query, roles, function (err, models) {
        next(err, (!err && models && models.length > 0) && models[0]);
    });
};



//finders implementation
ArticleLocationServiceAuth.getById = function getByIdAuth(id, roles, next) {
    this.find({"where":{"id":id}}, roles, next); //autogenerated from js configs
};


ArticleLocationServiceAuth.getByPageIdAndNamespace = function getByPageIdAndNamespaceAuth(pageId,namespace, roles, next) {
    this.find({"where":{"pageId":pageId,"namespace":namespace}}, roles, next); //autogenerated from js configs
};


ArticleLocationServiceAuth.getByPageIdAndNamespaceAndId = function getByPageIdAndNamespaceAndIdAuth(pageId,namespace,id, roles, next) {
    this.find({"where":{"pageId":pageId,"namespace":namespace,"id":id}}, roles, next); //autogenerated from js configs
};




module.exports = ArticleLocationServiceAuth;