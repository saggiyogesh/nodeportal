// this file is autogenerated
var ThemeBaseService = require("./ThemeBaseService"),
    PermissionActions = require(utils.getLibPath() + "/permissions").PermissionActions;

var modelName = ThemeBaseService.definition.name;


function ThemeServiceAuth() {
}

ThemeServiceAuth.create = function createAuth(data, pv, next) {
    pv.hasPermissionWithoutModelId(PermissionActions.ADD, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ThemeBaseService.create(query, next) : next(err);
    });
};

ThemeServiceAuth.update = function updateAuth(data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ThemeBaseService.update(data, next) : next(err);
    });
};

ThemeServiceAuth.remove = function removeAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ThemeBaseService.remove(pkValue, next) : next(err);
    });
};

ThemeServiceAuth.findById = function findByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.VIEW, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ThemeBaseService.findById(pkValue, next) : next(err);
    });
};

ThemeServiceAuth.deleteById = function deleteByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ThemeBaseService.deleteById(pkValue, next) : next(err);
    });
};

ThemeServiceAuth.updateById = function updateByIdAuth(pkValue, data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? ThemeBaseService.updateById(pkValue, data, next) : next(err);
    });
};

ThemeServiceAuth.find = function findAuth(query, roles, next) {
    ThemeBaseService.getDataSource().queryHook.authorizedFind(roles, modelName, query, next);
};
ThemeServiceAuth.count = function countAuth(where, roles, next) {
    ThemeBaseService.getDataSource().queryHook.authorizedCount(roles, modelName, where, next);
};

ThemeServiceAuth.findOne = function findOneAuth(query, roles, next) {
    this.find(query, roles, function (err, models) {
        next(err, (!err && models && models.length > 0) && models[0]);
    });
};



//finders implementation
ThemeServiceAuth.getDefault = function getDefaultAuth( roles, next) {
    this.findOne({"where":{"name":"Default","type":"page"}}, roles, next); //autogenerated from js configs
};


ThemeServiceAuth.getByName = function getByNameAuth(name, roles, next) {
    this.findOne({"where":{"name":name,"type":"page"}}, roles, next); //autogenerated from js configs
};


ThemeServiceAuth.getAllExceptDefault = function getAllExceptDefaultAuth( roles, next) {
    this.find({"where":{"name":{"neq":"2-col-70-30"},"type":"page"}}, roles, next); //autogenerated from js configs
};


ThemeServiceAuth.getAll = function getAllAuth( roles, next) {
    this.find({}, roles, next); //autogenerated from js configs
};


ThemeServiceAuth.getDefaultSettingsTheme = function getDefaultSettingsThemeAuth( roles, next) {
    this.find({"where":{"name":"Settings","type":"page"}}, roles, next); //autogenerated from js configs
};


ThemeServiceAuth.getAllPageType = function getAllPageTypeAuth( roles, next) {
    this.find({"where":{"type":"page"}}, roles, next); //autogenerated from js configs
};




module.exports = ThemeServiceAuth;