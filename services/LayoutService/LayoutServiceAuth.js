// this file is autogenerated
var LayoutBaseService = require("./LayoutBaseService"),
    PermissionActions = require(utils.getLibPath() + "/permissions").PermissionActions;

var modelName = LayoutBaseService.definition.name;


function LayoutServiceAuth() {
}

LayoutServiceAuth.create = function createAuth(data, pv, next) {
    pv.hasPermissionWithoutModelId(PermissionActions.ADD, function (err, perm) {
        (perm && perm.isAuthorized === true) ? LayoutBaseService.create(query, next) : next(err);
    });
};

LayoutServiceAuth.update = function updateAuth(data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? LayoutBaseService.update(data, next) : next(err);
    });
};

LayoutServiceAuth.remove = function removeAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? LayoutBaseService.remove(pkValue, next) : next(err);
    });
};

LayoutServiceAuth.findById = function findByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.VIEW, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? LayoutBaseService.findById(pkValue, next) : next(err);
    });
};

LayoutServiceAuth.deleteById = function deleteByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? LayoutBaseService.deleteById(pkValue, next) : next(err);
    });
};

LayoutServiceAuth.updateById = function updateByIdAuth(pkValue, data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? LayoutBaseService.updateById(pkValue, data, next) : next(err);
    });
};

LayoutServiceAuth.find = function findAuth(query, roles, next) {
    LayoutBaseService.getDataSource().queryHook.authorizedFind(roles, modelName, query, next);
};
LayoutServiceAuth.count = function countAuth(where, roles, next) {
    LayoutBaseService.getDataSource().queryHook.authorizedCount(roles, modelName, where, next);
};

LayoutServiceAuth.findOne = function findOneAuth(query, roles, next) {
    this.find(query, roles, function (err, models) {
        next(err, (!err && models && models.length > 0) && models[0]);
    });
};



//finders implementation
LayoutServiceAuth.getDefault = function getDefaultAuth( roles, next) {
    this.findOne({"where":{"name":"2-col-70-30"}}, roles, next); //autogenerated from js configs
};


LayoutServiceAuth.getOneCol = function getOneColAuth( roles, next) {
    this.findOne({"where":{"name":"1-col"}}, roles, next); //autogenerated from js configs
};


LayoutServiceAuth.getByName = function getByNameAuth(name, roles, next) {
    this.findOne({"where":{"name":name}}, roles, next); //autogenerated from js configs
};


LayoutServiceAuth.getAllExceptDefaults = function getAllExceptDefaultsAuth( roles, next) {
    this.find({"where":{"and":[{"name":{"neq":"2-col-70-30"}},{"name":{"neq":"1-col"}}]}}, roles, next); //autogenerated from js configs
};




module.exports = LayoutServiceAuth;