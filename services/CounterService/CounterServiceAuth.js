// this file is autogenerated
var CounterBaseService = require("./CounterBaseService"),
    PermissionActions = require(utils.getLibPath() + "/permissions").PermissionActions;

var modelName = CounterBaseService.definition.name;


function CounterServiceAuth() {
}

CounterServiceAuth.create = function createAuth(data, pv, next) {
    pv.hasPermissionWithoutModelId(PermissionActions.ADD, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CounterBaseService.create(query, next) : next(err);
    });
};

CounterServiceAuth.update = function updateAuth(data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CounterBaseService.update(data, next) : next(err);
    });
};

CounterServiceAuth.remove = function removeAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CounterBaseService.remove(pkValue, next) : next(err);
    });
};

CounterServiceAuth.findById = function findByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.VIEW, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CounterBaseService.findById(pkValue, next) : next(err);
    });
};

CounterServiceAuth.deleteById = function deleteByIdAuth(pkValue, pv, next) {
    pv.hasPermission(PermissionActions.DELETE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CounterBaseService.deleteById(pkValue, next) : next(err);
    });
};

CounterServiceAuth.updateById = function updateByIdAuth(pkValue, data, pv, next) {
    pv.hasPermission(PermissionActions.UPDATE, pkValue, function (err, perm) {
        (perm && perm.isAuthorized === true) ? CounterBaseService.updateById(pkValue, data, next) : next(err);
    });
};

CounterServiceAuth.find = function findAuth(query, roles, next) {
    CounterBaseService.getDataSource().queryHook.authorizedFind(roles, modelName, query, next);
};
CounterServiceAuth.count = function countAuth(where, roles, next) {
    CounterBaseService.getDataSource().queryHook.authorizedCount(roles, modelName, where, next);
};

CounterServiceAuth.findOne = function findOneAuth(query, roles, next) {
    this.find(query, roles, function (err, models) {
        next(err, (!err && models && models.length > 0) && models[0]);
    });
};



//finders implementation


module.exports = CounterServiceAuth;